# Hello World using Plain HTML

<body>
    <div id="root">
        <h1>Hello, World</h1>
    </div>
</body>

# Hello World using JavaScript

<body>
    <div id="root"></div>
    <script>
        const heading = document.createElement('h1');
        heading.innerHTML = "Hello, World";
        const root = document.getElementById('root');
        root.appendChild(heading);
    </script>
</body>

# Hello World using React CDN

<body>
    <div id="root">
        <h1>Not Rendered</h1>
    </div>
    <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script>
        const heading = React.createElement('h1',{id='heading'},'Hello, World');
        const root = ReactDOM.createRoot(document.getElementById('root'));
        root.render(heading);
    </script>
</body>

# What is CDN?
A CDN (Content Delivery Network) is a system of distributed servers that work together to deliver content to users based on their geographic location. 
It improves website performance by reducing latency and speeding up the delivery of static content (like images, videos, stylesheets, and scripts).

# What is CDN link?
CDN links refer to URLs that allow users to access content stored on a Content Delivery Network.

# What is crossorigin?
Cross-origin refers to requests made from one domain to another.
The crossorigin attribute helps manage the security and privacy of theese requests, particularly by enabling Cross-Origin Resource Sharing (CORS). 
CORS allows a server to control who can access its resources from other origins (domains).

# Creating Nested Element using React

// div#root > div#parent > div#child > h1

const parent = React.createElement(
    'div',
    {id:'parent'},
    React.createElement('div',{id:'child'},
        React.createElement('h1',{},"I am a H1 tag")
    )
)

// div#root > div#parent > div#child > h1, h2

const parent = React.createElement(
    'div',
    {id:'parent'},
    React.createElement('div',{id:'child'},[
        React.createElement('h1',{},"I am a H1 tag"),
        React.createElement('h2',{},"I am a H2 tag")    
    ])
)
// console.log(parent);
// Object; Warning of unique key prop


// div#root > div#parent > [div#child2 > [h1,h2], div#child2 > [h1,h2]]

const parent = React.createElement(
    'div',
    {id:'parent'},[
    React.createElement('div',{id:'child1'},[
        React.createElement('h1',{},"I am a H1 tag"),
        React.createElement('h2',{},"I am a H2 tag")    
    ]),
    React.createElement('div',{id:'child2'},[
        React.createElement('h1',{},"I am a H1 tag"),
        React.createElement('h2',{},"I am a H2 tag")    
    ])
])

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(parent);


# Order of placing file in HTML

<script src="./App.js"></script>
<script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
<script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>

// This will error as "React is not defined", Always put imports before your code.

# CDN links in Head or Body?
Put CDN links in head as it is and if we put in head use defer/async with it.

# React will replace the entire content of the container (div#root) with the new content generated by the React component.
# You can render multiple React elements, but you need to wrap them in a single parent element. React components must return one parent element.
